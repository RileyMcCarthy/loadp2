CON
		tx_pin = 62
		rx_pin = 63
		dbg_pin = 56
		
		FLAGBIT_ZERO = $1		' if set, zero HUB memory
		FLAGBIT_PATCHED = $2		' if set, clock frequency was patched into binary
  '' smart pin modes
  ser_txmode       = %0000_0000_000_0000000000000_01_11110_0 'async tx mode, output enabled for smart output
  ser_rxmode       = %0000_0000_000_0000000000000_00_11111_0 'async rx mode, input  enabled for smart input
		
DAT		org

begin		hubset	clkmode_			'set up oscillator 
                waitx   ##25_000_000/100        'wait >10 ms
                or      clkmode_, #3             'enable XI+PLL mode
                hubset  clkmode_                 'enable oscillator
		test	flagbits, #FLAGBIT_ZERO wz
	if_nz	jmp	#skipzero
		'' zero out memory
		wrfast	#0,0
		mov	pb, ##$7c0000/16
zeroloop
		wflong	zeros
		wflong	zeros
		wflong	zeros
		wflong	zeros
		djnz	pb, #zeroloop
		rdfast	#0,#0			' wait for last byte to be written
skipzero

restart		
		'' set up uart smart pins
		'' we don't know for sure what the frequency is, so use
		'' auto baud rate detection for this
		dirl	#rx_pin
		dirl	#tx_pin

		call	#autobaud
		mov     pa, waitbit	' autobaud set waitbit
		shl	pa, #16
		or      pa, #7	' set for 8 bits
		wrpin   ##ser_txmode, #tx_pin
		wxpin   pa, #tx_pin
		dirh    #tx_pin
		wrpin   ##ser_rxmode, #rx_pin
		wxpin   pa, #rx_pin
		dirh    #rx_pin

		'' try to receive a space
		'' if it works, autobaud is OK, otherwise re-try
.space
		testp	#rx_pin wc
	if_nc	jmp	#.space
		rdpin	rxbyte, #rx_pin
		shr	rxbyte, #24
		cmp	rxbyte, #$20 wz
	if_nz	jmp	#restart
	
		'' send 0 to host to indicate we are ready
setup
		mov	chksum, #0
		call	#send_chksum
		
		'' read file size
		call	#ser_rx
		mov	filesize, rxbyte
		call	#ser_rx
		shl	rxbyte, #8
		or	filesize, rxbyte
		call	#ser_rx
		shl	rxbyte, #16
		or	filesize, rxbyte
		call	#ser_rx
		shl	rxbyte, #24
		or	filesize, rxbyte

		wrfast	#0,address		'ready to write entire memory starting at address
		nop		       		' give time to settle
		
.mainloop
		call	#ser_rx
		wfbyte	rxbyte			'write to hub
		add	chksum, rxbyte

		djnz	filesize,#.mainloop	'loop until all bytes received

                rdfast  #0,#0                   'wait for last byte to be written

		'' respond to host
		call	#send_chksum

#ifdef NEVER
.done
		'' verify memory
		mov	chksum, #0
		mov	filesize, ##$8000
		mov	ptra, address
.again
		rdbyte	rxbyte, ptra++
		add	chksum, rxbyte
		djnz	filesize, #.again
		call	#send_chksum
		waitx	##80_000_000
		jmp	#.done
#endif

		waitx	##80_000_000/10		' short pause to ensure sync
		
		'' shut down smart pins
		dirl	#tx_pin
		dirl	#rx_pin
		wrpin	#0, #tx_pin
		wrpin	#0, #rx_pin
		
		' switch back to rcfast mode, maybe
		' if the binary was patched with -PATCH then we skip this
		test	flagbits, #FLAGBIT_PATCHED wz
	if_nz	jmp	#start_cog		 ' patched, so start right now
		' go back to rcfast mode
		andn	 clkmode_, #3
		hubset	 clkmode_
		hubset	 #0
start_cog
		waitx	 ##25_000_000/10
		coginit	#0,address		'launch cog 0 from address

send_chksum
		mov	temp, chksum
		shr	temp, #4
		and	temp, #$f
		add	temp, #"@"
		call	#ser_tx
		mov	temp, chksum
		and	temp, #$f
		add	temp, #"@"
		call	#ser_tx
		mov	temp, #" "
		call	#ser_tx
		ret
		
ser_tx
		wypin	temp, #tx_pin
		waitx	#20
.txflush
		testp	#tx_pin wc
	if_nc	jmp	#.txflush
		ret

' receive a byte from serial
ser_rx
		testp	#rx_pin wc
	if_nc	jmp	#ser_rx
		rdpin	rxbyte, #rx_pin
	_ret_	shr	rxbyte, #24

autobaud
		dirl	#rx_pin
		waitx	##1000
		mov	mask, ##(1<<(rx_pin-32))
		mov	port, #1

    		test port, #1 wc	' set C to distinguish INA/OUTA
    		test port, #2 wz    ' set Z (match on =)
		
                setpat mask, #0	' wait for pin lo (start bit)
    		waitpat
		setpat mask, mask	' wait for pin hi (first 1)
		waitpat
		getct a
    		setpat mask, #0	' wait for pin lo again (following 0)
    		waitpat
    		getct b
		setpat mask,mask	' wait for pin hi again (end of 0 sequence)
		waitpat
		getct waitbit

		sub   waitbit, b
		sub   b, a
		fle   waitbit, b
		mov   a, waitbit
		shl   a, #3
		waitx a
		
		ret
		
zeros
		long	0
waitbit		long	9999			'1 bit cycles = clock_freq/baud_rate - 6
		
		orgf	$80
clkmode_	res	1			'clock mode
flagbits	res	1			'flag bits, see definitions above
address		res	1			'starting address
filesize	res	1			'binary file size in bytes
rxbyte		res	1			'received byte
temp		res	1
chksum		res	1
mask		res	1
port		res	1
a		res	1
b		res	1

